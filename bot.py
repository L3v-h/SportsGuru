import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
import openai

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

class UserForm(StatesGroup):
    height = State()
    weight = State()
    age = State()
    goal = State()
    habits = State()

@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    await UserForm.height.set()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–≥–∏–¥. üß† –ü–æ–µ—Ö–∞–ª–∏!\n\n–°–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):")

@dp.message_handler(state=UserForm.height)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await UserForm.next()
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–µ—Å (–≤ –∫–≥):")

@dp.message_handler(state=UserForm.weight)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await UserForm.next()
    await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

@dp.message_handler(state=UserForm.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await UserForm.next()
    await message.reply("–¶–µ–ª—å: –ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É –∏–ª–∏ –¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ä–º—É?")

@dp.message_handler(state=UserForm.goal)
async def process_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await UserForm.next()
    await message.reply("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö: —Å–æ–Ω, –ø–∏—Ç–∞–Ω–∏–µ, –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏...")

@dp.message_handler(state=UserForm.habits)
async def process_habits(message: Message, state: FSMContext):
    await state.update_data(habits=message.text)
    data = await state.get_data()

    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –ø–ª–∞–Ω, —ç—Ç–æ –∑–∞–π–º—ë—Ç 5‚Äì10 —Å–µ–∫—É–Ω–¥... ‚è≥")
    plan = await generate_plan(data)
    await message.reply(plan)
    await state.finish()

async def generate_plan(data: dict) -> str:
    prompt = f"""
–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞:
–†–æ—Å—Ç: {data['height']} —Å–º
–í–µ—Å: {data['weight']} –∫–≥
–í–æ–∑—Ä–∞—Å—Ç: {data['age']}
–¶–µ–ª—å: {data['goal']}
–ü—Ä–∏–≤—ã—á–∫–∏: {data['habits']}

–°–¥–µ–ª–∞–π –ø–ª–∞–Ω –ø–æ–Ω—è—Ç–Ω—ã–º, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º, —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.
"""
    resp = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=1000,
        temperature=0.7,
    )
    return resp.choices[0].text.strip()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
