import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (—à–∞–≥–æ–≤)
class UserForm(StatesGroup):
    height = State()
    weight = State()
    age = State()
    goal = State()
    habits = State()

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    await UserForm.height.set()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω üß†\n\n–°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):")

# –†–æ—Å—Ç
@dp.message_handler(state=UserForm.height)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await UserForm.next()
    await message.reply("–ê —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π –≤–µ—Å (–≤ –∫–≥):")

# –í–µ—Å
@dp.message_handler(state=UserForm.weight)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await UserForm.next()
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

# –í–æ–∑—Ä–∞—Å—Ç
@dp.message_handler(state=UserForm.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await UserForm.next()
    await message.reply("–ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É, –¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ä–º—É):")

# –¶–µ–ª—å
@dp.message_handler(state=UserForm.goal)
async def process_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await UserForm.next()
    await message.reply("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫ –ø–∏—Ç–∞–µ—à—å—Å—è, —Å–ø–∏—à—å, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏.")

# –ü—Ä–∏–≤—ã—á–∫–∏
@dp.message_handler(state=UserForm.habits)
async def process_habits(message: Message, state: FSMContext):
    await state.update_data(habits=message.text)
    data = await state.get_data()

    # –ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥–∏ (–≤ –±—É–¥—É—â–µ–º ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI)
    summary = (
        f"‚úÖ –í–æ—Ç —á—Ç–æ —Ç—ã –≤–≤—ë–ª:\n"
        f"–†–æ—Å—Ç: {data['height']} —Å–º\n"
        f"–í–µ—Å: {data['weight']} –∫–≥\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–¶–µ–ª—å: {data['goal']}\n"
        f"–ü—Ä–∏–≤—ã—á–∫–∏: {data['habits']}\n\n"
        f"‚è≥ –ñ–¥–∏... –°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω!"
    )
    await message.reply(summary)

    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
